"""
Find users with status "Disabled" and set status to "Enabled"
if they are found in the iTopUserLDAPCollector-1.csv file

"""

__author__ = "Pavel Stetinac Stetina"

import requests
import json
import urllib3
import pandas as pd
import xml.etree.ElementTree as ET
import os
import sys
urllib3.disable_warnings()


DRY_RUN=False # If True only prepare data without calling API
##############################################################################################################
# Default config

ITOP_CLASSES=("UserLDAP", "UserExternal") # iTop Classes for cleaning users 
XML_LDAP="/opt/ldap-data-collector"       # Path for Class XML config file
XML_SAML="/opt/ldap-data-collector_saml"  # Path for Class XML config file
XML={"UserLDAP":XML_LDAP,"UserExternal":XML_SAML} # Dict of Classes and paths
CFG_FILE="/conf/params.local.xml"   # Path for XML config file - default is /conf/params.local.xml
CSV_FILE = "/data/iTopUserLDAPCollector-1.csv" # Path for CSV file generated by LDAP sync plugin


def dataUserImport(inFile):
    """
    Read users from iTopUserLDAPCollector-1.csv
    Return list of active users login
    """
    if os.path.isfile(inFile): # testing if CSV file exists

        df_csv = pd.read_csv(inFile, delimiter=";") # make Pandas DataFrame form CSV file
        user_names = list(df_csv['login']) # make list of logins from column "login"
        return user_names
    else:
        print(f"error: {cfg_file} does not exist")


def findDisabledUsers(user_type):
    """
    Find disabled users for Class defined in user_type
    Returns JSON data from API
    """
    REQUEST_KEY = f'SELECT {user_type} WHERE status = "disabled"' # OQL select

    json_data = {
        "operation": "core/get",
        "class": user_type,
        "key": REQUEST_KEY,
        "output_fields": "login, status, contactid, profile_list, allowed_org_list",
    }
    encoded_data = json.dumps(json_data)
    return API_Request(encoded_data)

def decodeUserStatus(in_data):
    """
    Processes JSON data from in_data
    Return list of disabled user logins
    """
    if in_data:
        json_data=json.loads(in_data)
        finds=json_data['message'] # extract number of returned users
        numout=finds.split() # extract only number for test
        ret_data = []
        if (int(numout[1])) > 0:
            for i in json_data['objects']:
                ret_data.append(json_data['objects'][i]['fields']['login']) #extract user login
            return ret_data
        else:
            print("No users are disabled")
    else:
        print("No data for decodeUserStatus")        

def findUsersToEnable(dis_users, impt_users):
    """
    Compare users from CSV with disabled users from API
    and return users to be enabled
    """
    
    if dis_users and impt_users:
        users_to_en = []
        for _ in impt_users:
            if _ in dis_users:
                users_to_en.append(_)

        if users_to_en:
            return users_to_en
        else:
            print(f"Find {len(users_to_en)} users to be enabled")
    else:
        print("No data for findUsersToEnable")

def updateUserStatus(users, user_type, REQUEST_STATUS="enabled"):
    """
    Update user status to Enabled(default) or Disabled
    """
    REQUEST_OPERATION = "core/update"
    REQUEST_CLASS = user_type
    REQUEST_COMMENT = "Update by snake updater"
    REQUEST_OUTPUT_FIELDS = "status"

    if not users:
        print(f"No {user_type} users to be updated")
    else:
        for _ in users:
            login = _
            print(f"Update {user_type} status for: {_}")
            json_data = {
                "operation": REQUEST_OPERATION,
                "comment": REQUEST_COMMENT,
                "class":REQUEST_CLASS,
                "key":{"login": login},
                "output_fields":REQUEST_OUTPUT_FIELDS,
                "fields":{"status": REQUEST_STATUS}}
            encoded_data = json.dumps(json_data)
            
            if not DRY_RUN: # Call API if DRY_RUN is not set to True
                API_Request(encoded_data)

def API_Request(json_payload):
    """
    iTop API handler
    """
    try:
        req = requests.post(ITOP_URL+'/webservices/rest.php?version=1.3',
                            verify=False,
                            data={'auth_user': ITOP_USER ,
                                  'auth_pwd': ITOP_PWD ,
                                  'json_data': json_payload})
        
        req.raise_for_status()
    except requests.exceptions.HTTPError as errh:
        print ("Http Error:",errh)
    except requests.exceptions.ConnectionError as errc:
        print ("Error Connecting:",errc)
    except requests.exceptions.Timeout as errt:
        print ("Timeout Error:",errt)
    except requests.exceptions.RequestException as err:
        print ("OOps: Something Else",err)
        raise SystemExit(err)
    
    json_data=json.loads(req.text)
    if json_data['code']> 0:
        print(f"Error code: {json_data['code']}, Error message: {json_data['message']}")
        exit()
    return req.text

if __name__ == "__main__":
    if 'dry' in str(sys.argv): # You can call script with dry parameter - it overrides the DRY_RUN variable
        DRY_RUN = True

    if DRY_RUN:
        print("Dry run is enabled")

    for _ in ITOP_CLASSES: # process given classes
        cfg_file = XML[_] + CFG_FILE # make path for XML cfg file
        data_file = XML[_] + CSV_FILE # make path for CSV file

        if os.path.isfile(cfg_file) and os.path.isfile(data_file):
            # take data from XML cfg file
            tree=ET.parse(cfg_file)
            root=tree.getroot()
            ITOP_USER = root[1].text
            ITOP_URL = root[0].text
            ITOP_PWD = root[2].text
            
            # calling functions 
            disab_user = findDisabledUsers(_)                      # find disabled users by API and return JSON for given class
            decoded_disabled = decodeUserStatus(disab_user)        # process JSON and return list of disabled user logins
            import_users = dataUserImport(data_file)               # process CSV file and return list of active user logins for given class
            users_to_enable = findUsersToEnable(decoded_disabled, import_users)   # compare CSV and JSON data and return user logins to be activated
            updateUserStatus(users_to_enable, _)                   # activate users by login for given class

        else:
            if not os.path.isfile(cfg_file):
                print(f"error: {cfg_file} does not exist")
            if not os.path.isfile(data_file):
                print(f"error: {data_file} does not exist")
            exit()
